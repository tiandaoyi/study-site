import{_ as a,o as l,c as n,S as p}from"./chunks/framework.6a244606.js";const A=JSON.parse('{"title":"计算机基础","description":"","frontmatter":{},"headers":[],"relativePath":"be/java.md","filePath":"be/java.md","lastUpdated":1707017296000}'),o={name:"be/java.md"};function e(t,s,c,r,i,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="计算机基础" tabindex="-1">计算机基础 <a class="header-anchor" href="#计算机基础" aria-label="Permalink to &quot;计算机基础&quot;">​</a></h1><h2 id="任意进制转十进制" tabindex="-1">任意进制转十进制 <a class="header-anchor" href="#任意进制转十进制" aria-label="Permalink to &quot;任意进制转十进制&quot;">​</a></h2><p>系数（每一位上的数）*基数（当前进制数）的权（从右往左0,1,2...）次幂 相加</p><h2 id="十进制转任意进制" tabindex="-1">十进制转任意进制 <a class="header-anchor" href="#十进制转任意进制" aria-label="Permalink to &quot;十进制转任意进制&quot;">​</a></h2><p>不断的除以基数，取余数，直到商为0，再将余数倒着拼起来</p><h2 id="计算机光学颜色-红、绿、蓝" tabindex="-1">计算机光学颜色（红、绿、蓝） <a class="header-anchor" href="#计算机光学颜色-红、绿、蓝" aria-label="Permalink to &quot;计算机光学颜色（红、绿、蓝）&quot;">​</a></h2><p>10进制：0-255（可以理解数字越大颜色数越多） 16进制：0-FF（FF=15<em>16^0+15</em>16^1=255）</p><h1 id="java基础" tabindex="-1">java基础 <a class="header-anchor" href="#java基础" aria-label="Permalink to &quot;java基础&quot;">​</a></h1><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><ul><li>双引号是字符串，单引号是字符且只可有一个</li><li>null类型不能直接打印</li><li>制表符 &#39;/t&#39;: 把前面的字符串补齐到8，或者8的整数倍，最少补1个，最多补8个字符</li><li>整数类型int，浮点类型double</li></ul><p>基本数据类型分为四类八种</p><p>整数：byte(-128~127)1字节, short(32768~32767)2字节, int默认(-2147483648~212147483647)3字节, long(19位数范围，后面加一个L)4字节 浮点数：float（后面需要加F后缀）, double（默认、范围更大） 字符：char（0-65535） 布尔：boolean</p><h3 id="java中不同进制的表现形式" tabindex="-1">java中不同进制的表现形式 <a class="header-anchor" href="#java中不同进制的表现形式" aria-label="Permalink to &quot;java中不同进制的表现形式&quot;">​</a></h3><ul><li>0b开头二进制</li><li>0开头八进制</li><li>0x开头十六进制</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="键盘录入" tabindex="-1">键盘录入 <a class="header-anchor" href="#键盘录入" aria-label="Permalink to &quot;键盘录入&quot;">​</a></h3><ul><li>nextDouble接受小数</li><li>next接受字符串（制表符和空格分开计算）</li><li>nextLine接受字符串（只有回车才表示结束）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> java</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">util</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Scanner</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#CB7676;">public</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">class</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">ScannerDemo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">public</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">static</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">void</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">main</span><span style="color:#666666;">(</span><span style="color:#CB7676;">String</span><span style="color:#666666;">[]</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">args</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    Scanner</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">sc</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Scanner</span><span style="color:#666666;">(</span><span style="color:#BD976A;">System</span><span style="color:#666666;">.</span><span style="color:#BD976A;">in</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#CB7676;">int</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">num</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">sc</span><span style="color:#666666;">.</span><span style="color:#80A665;">nextInt</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">System</span><span style="color:#666666;">.</span><span style="color:#BD976A;">out</span><span style="color:#666666;">.</span><span style="color:#80A665;">println</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">num</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> java</span><span style="color:#999999;">.</span><span style="color:#393A34;">util</span><span style="color:#999999;">.</span><span style="color:#393A34;">Scanner</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ScannerDemo</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">static</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">void</span><span style="color:#393A34;"> </span><span style="color:#59873A;">main</span><span style="color:#999999;">(</span><span style="color:#AB5959;">String</span><span style="color:#999999;">[]</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">args</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    Scanner</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">sc</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Scanner</span><span style="color:#999999;">(</span><span style="color:#B07D48;">System</span><span style="color:#999999;">.</span><span style="color:#B07D48;">in</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">int</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">num</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sc</span><span style="color:#999999;">.</span><span style="color:#59873A;">nextInt</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">System</span><span style="color:#999999;">.</span><span style="color:#B07D48;">out</span><span style="color:#999999;">.</span><span style="color:#59873A;">println</span><span style="color:#999999;">(</span><span style="color:#393A34;">num</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h3 id="随机数" tabindex="-1">随机数 <a class="header-anchor" href="#随机数" aria-label="Permalink to &quot;随机数&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> java</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">util</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Random</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">Random</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">r</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Random</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#758575DD;">// 随机数的范围， 如果是100，则范围0-99</span></span>
<span class="line"><span style="color:#CB7676;">int</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">number</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">r</span><span style="color:#666666;">.</span><span style="color:#80A665;">nextInt</span><span style="color:#666666;">();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> java</span><span style="color:#999999;">.</span><span style="color:#393A34;">util</span><span style="color:#999999;">.</span><span style="color:#393A34;">Random</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">Random</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">r</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Random</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#A0ADA0;">// 随机数的范围， 如果是100，则范围0-99</span></span>
<span class="line"><span style="color:#AB5959;">int</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">number</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#999999;">.</span><span style="color:#59873A;">nextInt</span><span style="color:#999999;">();</span></span></code></pre></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p>项目、模块、包、类</p><h2 id="运算" tabindex="-1">运算 <a class="header-anchor" href="#运算" aria-label="Permalink to &quot;运算&quot;">​</a></h2><h3 id="算术运算" tabindex="-1">算术运算 <a class="header-anchor" href="#算术运算" aria-label="Permalink to &quot;算术运算&quot;">​</a></h3><ol><li>整数参与计算，结果只能是整数</li><li>小数参与计算，结果可能是不精确的</li></ol><p><code>10 / 3 = 3</code><code>10.0 / 3 = 3.33333335</code></p><h3 id="隐式转换-类型提升" tabindex="-1">隐式转换（类型提升） <a class="header-anchor" href="#隐式转换-类型提升" aria-label="Permalink to &quot;隐式转换（类型提升）&quot;">​</a></h3><ol><li>小变大，取值范围小的转成取值范围大的，会把小的先改成大的，再进行运算</li><li>byte short char 三种类型数据进行运算的时候，都会先提升成int，再进行运算</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">int</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">a</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">10</span></span>
<span class="line"><span style="color:#CB7676;">double</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> b </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> a </span><span style="color:#758575DD;">// b = 10.0</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">int</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">a</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span></span>
<span class="line"><span style="color:#AB5959;">double</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> b </span><span style="color:#999999;">=</span><span style="color:#393A34;"> a </span><span style="color:#A0ADA0;">// b = 10.0</span></span></code></pre></div><h3 id="强制转换" tabindex="-1">强制转换 <a class="header-anchor" href="#强制转换" aria-label="Permalink to &quot;强制转换&quot;">​</a></h3><p>大的转小的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">int</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">a1</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">300</span></span>
<span class="line"><span style="color:#CB7676;">byte</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">a2</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">byte</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;">a1</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">int</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">a1</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">300</span></span>
<span class="line"><span style="color:#AB5959;">byte</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">a2</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">byte</span><span style="color:#999999;">)</span><span style="color:#393A34;">a1</span></span></code></pre></div><h3 id="有字符时的算术运算符" tabindex="-1">有字符时的算术运算符 <a class="header-anchor" href="#有字符时的算术运算符" aria-label="Permalink to &quot;有字符时的算术运算符&quot;">​</a></h3><ol><li>从左向右加</li><li>如果是字符串，会把之前的拼接到一起</li><li>如果是char类型会使用asc码表的值进行计算</li></ol><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><ol><li>逻辑与 <code>&amp;</code></li><li>逻辑或 <code>|</code></li><li>逻辑异或 <code>^</code> 相同false，不同true</li><li>逻辑非 <code>!</code> 取反</li><li>短路与 <code>&amp;&amp;</code> 有短路效果</li><li>短路或 <code>||</code> 有短路效果</li></ol><h3 id="三元运算符" tabindex="-1">三元运算符 <a class="header-anchor" href="#三元运算符" aria-label="Permalink to &quot;三元运算符&quot;">​</a></h3><ul><li>格式： <code>关系表达式 ? 表达式1 : 表达式2</code></li><li>特点：三元运算符的结果必须要使用，比如赋值给变量或者打印</li></ul><h3 id="switch语句" tabindex="-1">switch语句 <a class="header-anchor" href="#switch语句" aria-label="Permalink to &quot;switch语句&quot;">​</a></h3><ol><li>取值：byte,short,int, char, 枚举, String</li><li>case不允许重复</li><li>case的值只能是字面量，不允许是变量</li><li>jdk12特性，<code>case 变量 -&gt; 执行语句</code>，可以省略<code>break;</code></li><li>jdk12特性，如果有结果，可以把switch返回给一个变量</li><li>case如果没有break可以穿透</li><li>可以case多个，用<code>,</code>分割 <code>case: 1,2,3,4</code></li></ol><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>数组指的是一种容器，可以存储同种数据的多个值</p><ul><li>数组容器在存储数据的时候，需要结合隐式转换考虑</li><li>int类型的数组容器(byte, short, int)</li><li>double类型的数组容器(byte, short, int, long, float, double)</li><li>建议容器的类型和存储的数据类型保持一致</li></ul><p>两种格式</p><ol><li>数据类型[] 数组名（常用）</li><li>数据类型 数组名[]</li></ol><p>数组创建完毕，长度不变</p><p>初始化</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">int</span><span style="color:#666666;">[]</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">array</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">int</span><span style="color:#666666;">[]{</span><span style="color:#4C9A91;">11</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">22</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">33</span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#758575DD;">// 简写</span></span>
<span class="line"><span style="color:#DBD7CAEE;">String[] arr1 </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">zhangsan</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">lisi</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">int</span><span style="color:#999999;">[]</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">array</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">int</span><span style="color:#999999;">[]{</span><span style="color:#2F798A;">11</span><span style="color:#999999;">,</span><span style="color:#2F798A;">22</span><span style="color:#999999;">,</span><span style="color:#2F798A;">33</span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#A0ADA0;">// 简写</span></span>
<span class="line"><span style="color:#393A34;">String[] arr1 </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">zhangsan</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">lisi</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">}</span></span></code></pre></div><p>索引，直接用[]，通过对应数组索引的下标获取数据 <code>arr1[0]</code></p><p>定义数组（动态初始化创建）： 数据类型[] 数组名 = new 数据类型[数组的长度] String[] arr = new String[50] 数组默认初始化值: 有规律的，跟类型有关 如0/0.0/false/\\u0000(字符类型，空格)/null(引用类型) 动态初始化，明确数组长度。 静态初始化，手动指定元素，系统计算长度。</p><h3 id="二维数组的格式" tabindex="-1">二维数组的格式 <a class="header-anchor" href="#二维数组的格式" aria-label="Permalink to &quot;二维数组的格式&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">int</span><span style="color:#666666;">[][]</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">arr</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">int</span><span style="color:#666666;">[][];</span></span>
<span class="line"><span style="color:#CB7676;">int</span><span style="color:#666666;">[][]</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">arr</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{{</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">3</span><span style="color:#666666;">},{</span><span style="color:#4C9A91;">4</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">5</span><span style="color:#666666;">,</span><span style="color:#4C9A91;">6</span><span style="color:#666666;">}};</span></span>
<span class="line"><span style="color:#CB7676;">int</span><span style="color:#666666;">[][]</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">arr</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">int</span><span style="color:#666666;">[][]{{},{}};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">int</span><span style="color:#999999;">[][]</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">arr</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">int</span><span style="color:#999999;">[][];</span></span>
<span class="line"><span style="color:#AB5959;">int</span><span style="color:#999999;">[][]</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">arr</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{{</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#2F798A;">3</span><span style="color:#999999;">},{</span><span style="color:#2F798A;">4</span><span style="color:#999999;">,</span><span style="color:#2F798A;">5</span><span style="color:#999999;">,</span><span style="color:#2F798A;">6</span><span style="color:#999999;">}};</span></span>
<span class="line"><span style="color:#AB5959;">int</span><span style="color:#999999;">[][]</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">arr</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">int</span><span style="color:#999999;">[][]{{},{}};</span></span></code></pre></div><h2 id="java内存分配" tabindex="-1">java内存分配 <a class="header-anchor" href="#java内存分配" aria-label="Permalink to &quot;java内存分配&quot;">​</a></h2><p>栈（方法运行时使用的内存）、堆（对象、数组，new出来的关键字都是在堆空间）、方法区（存储可以运行的class文件）、本地方法栈（jvm使用）、寄存器（cpu使用）</p><h2 id="方法定义" tabindex="-1">方法定义 <a class="header-anchor" href="#方法定义" aria-label="Permalink to &quot;方法定义&quot;">​</a></h2><p><code>public static void 方法名(int num1, int num2){}</code></p><h3 id="方法的注意事项" tabindex="-1">方法的注意事项 <a class="header-anchor" href="#方法的注意事项" aria-label="Permalink to &quot;方法的注意事项&quot;">​</a></h3><p>方法不调用就不执行 方法与方法之间是平级关系，不能互相嵌套 方法的编写顺序和执行顺序无关 方法的返回值类型为void，表示该方法没有返回值，没有返回值的方法可以省略return语句不写。如果要编写return，后面不能跟具体的数据。</p><h3 id="方法的重载" tabindex="-1">方法的重载 <a class="header-anchor" href="#方法的重载" aria-label="Permalink to &quot;方法的重载&quot;">​</a></h3><p>在同一个类中，方法名相同，参数不同的方法。与返回值无关 java虚拟机会通过参数的不同来区分同名的方法（参数不同构成重载，但不建议）</p><h3 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h3><ol><li>方法名与类名相同，大小写也有</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">public</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">class</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Student</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// 空参构造方法</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">public</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Student</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// 有参构造方法</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">public</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Student</span><span style="color:#666666;">(</span><span style="color:#CB7676;">int</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">a</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">int</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">b</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Student</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 空参构造方法</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Student</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 有参构造方法</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">public</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Student</span><span style="color:#999999;">(</span><span style="color:#AB5959;">int</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">int</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">b</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h3 id="javabean类" tabindex="-1">JavaBean类 <a class="header-anchor" href="#javabean类" aria-label="Permalink to &quot;JavaBean类&quot;">​</a></h3><ol><li>类名需要见名知意</li><li>成员变量使用private修饰</li><li>提供至少两个构造方法（无参，有参）</li><li>成员方法（提供每一个成员变量对应的setXxx()/getXxx()、如果还有其他行为，也需要写上）</li></ol><p>快捷键alt+insert或者ptg插件（vscode）</p><h3 id="system-out-printf" tabindex="-1">System.out.printf <a class="header-anchor" href="#system-out-printf" aria-label="Permalink to &quot;System.out.printf&quot;">​</a></h3><p>第一部分参数：要输入的内容%s(占位) 第二部分参数：填充的数据</p><p><code>System.out.printf(&quot;你好啊%s&quot;, &quot;张三&quot;);</code></p><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>String, StringBuilder, StringJonier, String Buffer, Pattern, Matcher</p><p>创建String对象的两种方式</p><ol><li>直接赋值 （记录的是串池里面的地址值）</li><li>new关键字记录的是堆里面的地址值）</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">char</span><span style="color:#666666;">[]</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">chs</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">a</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">b</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">c</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">d</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">};</span></span>
<span class="line"><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">String</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">chs</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">char</span><span style="color:#999999;">[]</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">chs</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">b</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">c</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">d</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">};</span></span>
<span class="line"><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">String</span><span style="color:#999999;">(</span><span style="color:#393A34;">chs</span><span style="color:#999999;">);</span></span></code></pre></div><p>字符串转数字</p><ul><li>先转成字符，再-48 (ASC码表)</li></ul><p>字符串比较</p><ul><li>基本数据类型比较的是具体的值，引用类型比较的是具体的值</li><li>通常使用equals(), equalsIgnoreCase()来进行比较字符串中的内容 s1.equals(s2)</li></ul><p>其他常见的字符串方法：substring(), replace(), chatAt(), toCharArray()</p><h3 id="stringbuilder" tabindex="-1">StringBuilder <a class="header-anchor" href="#stringbuilder" aria-label="Permalink to &quot;StringBuilder&quot;">​</a></h3><p>可以看成是一个容器，创建之后的内容是可变的，提高操作效率。</p><p>常见方法：append、reverse、length、toString</p><h3 id="stringjoiner" tabindex="-1">StringJoiner <a class="header-anchor" href="#stringjoiner" aria-label="Permalink to &quot;StringJoiner&quot;">​</a></h3><p>第一个参数是分隔符，第二个参数和第三个参数是开始结束符号（jdk8）</p><p>add length toString 方法</p><h3 id="字符串相关原理" tabindex="-1">字符串相关原理 <a class="header-anchor" href="#字符串相关原理" aria-label="Permalink to &quot;字符串相关原理&quot;">​</a></h3><p>字符串存储原理</p><ol><li>直接赋值会复用字符串常量池中的</li><li>new出来不会复用，而是开辟一个新的空间</li></ol><p>==号比较的是什么？</p><ol><li>基本数据类型比较数据值</li><li>引用数据类型比较地址值</li></ol><p>字符串拼接的底层原理</p><ol><li>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串。</li><li>如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存</li></ol><p>StringBuilder提高效率原理</p><ul><li>所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</li></ul><p>StringBuilder源码分析</p><ol><li>初始化16长度字节数组</li><li>添加的内容大于16会扩容成原来的容量*2 + 2</li><li>扩容后还不够，以实际长度为准</li></ol><h2 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h2><p>集合长度可变，只能存储引用类型，或者包装类</p><p>ArrayList这个类在底层做了一些处理，打印对象不是地址值，而是集合中存储数据内容。</p><p>成员方法: add, remove, set, get, size</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#DBD7CAEE;">ArrayList</span><span style="color:#666666;">&lt;</span><span style="color:#CB7676;">String</span><span style="color:#666666;">&gt;</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">list</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> ArrayList</span><span style="color:#666666;">&lt;&gt;();</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393A34;">ArrayList</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">String</span><span style="color:#999999;">&gt;</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">list</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> ArrayList</span><span style="color:#999999;">&lt;&gt;();</span></span></code></pre></div><p>基本数据类型的包装类, char -&gt; Character, int -&gt; Integer，其他的都是首字母变成大写</p><h2 id="static" tabindex="-1">static <a class="header-anchor" href="#static" aria-label="Permalink to &quot;static&quot;">​</a></h2><p>表示静态，是java中的一个修饰符，可以修饰成员方法，成员变量</p><p>随着类的加载而加载</p><h3 id="静态变量" tabindex="-1">静态变量 <a class="header-anchor" href="#静态变量" aria-label="Permalink to &quot;静态变量&quot;">​</a></h3><p>特点：</p><ul><li>被该类所有对象共享。</li><li>不属于对象，属于类。</li><li>随着类的加载而加载，优先于对象存在。</li></ul><p>调用方式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// 类名去调用（推荐）</span></span>
<span class="line"><span style="color:#BD976A;">ClassXX</span><span style="color:#666666;">.</span><span style="color:#BD976A;">xx</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">xx</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#758575DD;">// 对象名调用</span></span>
<span class="line"><span style="color:#DBD7CAEE;">ClassXX</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">myClass</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">ClassXX</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#BD976A;">myClass</span><span style="color:#666666;">.</span><span style="color:#BD976A;">xx</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">xx</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 类名去调用（推荐）</span></span>
<span class="line"><span style="color:#B07D48;">ClassXX</span><span style="color:#999999;">.</span><span style="color:#B07D48;">xx</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">xx</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#A0ADA0;">// 对象名调用</span></span>
<span class="line"><span style="color:#393A34;">ClassXX</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">myClass</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ClassXX</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#B07D48;">myClass</span><span style="color:#999999;">.</span><span style="color:#B07D48;">xx</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">xx</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span></code></pre></div><h3 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><p>被static修饰的成员方法，叫做静态方法</p><p>特点：</p><ul><li>多用在测试类和工具类中</li><li>javabean类中很少会用</li></ul><p>调用方式：</p><p>类名调用（推荐） 对象名调用</p><ol><li>静态方法中，只能访问静态。</li><li>非静态方法可以访问所有</li><li>静态方法中没有this关键字</li></ol><h3 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-label="Permalink to &quot;工具类&quot;">​</a></h3><p>帮主我们做一些事情的，但是不描述任何事物的类</p><ol><li>类名见名知义</li><li>私有化构造方法</li><li>方法定义为静态</li></ol><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><p>特点：</p><ol><li>只支持单继承，不支持多继承，但支持多层继承。</li><li>每一个类都直接或者间接的继承Object</li><li>子类只能访问父类中非私有的成员</li><li>私有的（在构造方法，成员变量，成员方法中），只有成员变量能被子类继承，但需要通过其他方式使用</li></ol><p>方法：子类继承父类过程中，非private\\static\\final都不会被继承（虚方法表）</p><h4 id="方法重写" tabindex="-1">方法重写 <a class="header-anchor" href="#方法重写" aria-label="Permalink to &quot;方法重写&quot;">​</a></h4><p>@Override 重写注释</p><p>重写的注意事项：</p><ol><li>方法名，形参列表，必须与父类中的一致。</li><li>子类重写父类方法时，访问权限必须大于等于父类</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类</li><li>建议：重写的方法尽量和父类保持一致。</li><li>只有被添加到虚方法表中的方法才能被重写</li></ol><h4 id="继承构造方法" tabindex="-1">继承构造方法： <a class="header-anchor" href="#继承构造方法" aria-label="Permalink to &quot;继承构造方法：&quot;">​</a></h4><ol><li>父类中的构造方法不会被子类继承。</li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己。</li><li>子类的构造方法第一行默认都是super()，不写也存在，如果想调用有参构造，必须手动写super。</li></ol><p>this, super访问成员方法和成员变量直接this.，如果是访问构造方法，就this(...)</p><h2 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h2><p>什么是多态?</p><ul><li>对象的多种形态</li></ul><p>多态的前提？</p><ol><li>有继承/实现关系</li><li>有父类引用指向子类对象</li><li>有方法的重写</li></ol><p>调用成员变量的特点：编译看左边，运行看左边 调用成员方法的特点：编译看左边，运行看右边</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#DBD7CAEE;">Animal</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">a</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Dog</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#80A665;">sout</span><span style="color:#666666;">(</span><span style="color:#BD976A;">a</span><span style="color:#666666;">.</span><span style="color:#BD976A;">name</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">// animal  编译看左边</span></span>
<span class="line"><span style="color:#BD976A;">a</span><span style="color:#666666;">.</span><span style="color:#80A665;">show</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// this is dog  运行看右边（运行是看子类中重写的方法）</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393A34;">Animal</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">a</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Dog</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#59873A;">sout</span><span style="color:#999999;">(</span><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">// animal  编译看左边</span></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#59873A;">show</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// this is dog  运行看右边（运行是看子类中重写的方法）</span></span></code></pre></div><p>多态的弊端：</p><ul><li>不能调用子类的特有方法</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#DBD7CAEE;">Animal</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">a</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Dog</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#BD976A;">a</span><span style="color:#666666;">.</span><span style="color:#80A665;">dogMethod</span><span style="color:#666666;">();</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 解决：编译回子类类型</span></span>
<span class="line"><span style="color:#DBD7CAEE;">Dog</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">d</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">Dog</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> a</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">d</span><span style="color:#666666;">.</span><span style="color:#80A665;">dogMethod</span><span style="color:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 推荐使用 instanceof 判断</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">a instanceOf Dog</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">Dog</span><span style="color:#C99076;"> </span><span style="color:#BD976A;">d</span><span style="color:#C99076;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">Dog</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> a</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">d</span><span style="color:#666666;">.</span><span style="color:#80A665;">dogMethod</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">a instanceOf Dog d</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// jdk 14</span></span>
<span class="line"><span style="color:#BD976A;">d</span><span style="color:#666666;">.</span><span style="color:#80A665;">dogMethod</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393A34;">Animal</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">a</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Dog</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#59873A;">dogMethod</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 解决：编译回子类类型</span></span>
<span class="line"><span style="color:#393A34;">Dog</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">d</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#393A34;">Dog</span><span style="color:#999999;">)</span><span style="color:#393A34;"> a</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">d</span><span style="color:#999999;">.</span><span style="color:#59873A;">dogMethod</span><span style="color:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 推荐使用 instanceof 判断</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#393A34;">a instanceOf Dog</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">Dog</span><span style="color:#A65E2B;"> </span><span style="color:#B07D48;">d</span><span style="color:#A65E2B;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#393A34;">Dog</span><span style="color:#999999;">)</span><span style="color:#393A34;"> a</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">d</span><span style="color:#999999;">.</span><span style="color:#59873A;">dogMethod</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#393A34;">a instanceOf Dog d</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// jdk 14</span></span>
<span class="line"><span style="color:#B07D48;">d</span><span style="color:#999999;">.</span><span style="color:#59873A;">dogMethod</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><ul><li>使用父类型作为参数，可以接受所有子类对象，体现多态的扩展性与便利</li></ul><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><p>全类名：包名+类名</p><p>规则</p><ul><li>使用同一个包中的类时，不需要导包</li><li>使用java.lang包中的类时，不需要导包</li><li>其他情况都需要导包</li><li>如果同时使用两个包中的同名类，需要用全类名</li></ul><h2 id="final" tabindex="-1">final <a class="header-anchor" href="#final" aria-label="Permalink to &quot;final&quot;">​</a></h2><p>方法：不能被重写 类：不能被继承 变量：常量，只能被赋值一次</p><h2 id="权限修饰符" tabindex="-1">权限修饰符 <a class="header-anchor" href="#权限修饰符" aria-label="Permalink to &quot;权限修饰符&quot;">​</a></h2><p>private -&gt; 空着不写 -&gt; protected -&gt; public 同一个类 -&gt; 同一个包中其他类 -&gt; 不同包下的子类 -&gt; 不同包下的无关类</p><h2 id="代码块" tabindex="-1">代码块 <a class="header-anchor" href="#代码块" aria-label="Permalink to &quot;代码块&quot;">​</a></h2><p>局部代码块，构造代码块，静态代码块</p><h3 id="局部代码块" tabindex="-1">局部代码块 <a class="header-anchor" href="#局部代码块" aria-label="Permalink to &quot;局部代码块&quot;">​</a></h3><p>作用：提前结束变量的生命周期（已淘汰）</p><h3 id="构造代码块" tabindex="-1">构造代码块 <a class="header-anchor" href="#构造代码块" aria-label="Permalink to &quot;构造代码块&quot;">​</a></h3><p>作用：抽取构造方法中的重复代码（不够灵活）</p><ol><li>写在成员位置的代码块</li><li>作用：可以把多个构造方法中重复的代码抽取出来</li><li>执行时机：我们在创建本类对象的时候会先执行构造代码块再执行构造方法</li></ol><h3 id="静态代码块" tabindex="-1">静态代码块 <a class="header-anchor" href="#静态代码块" aria-label="Permalink to &quot;静态代码块&quot;">​</a></h3><p>作用：数据的初始化（重点）</p><p>格式: static{} 特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次。 使用场景：随着类的加载而加载，只执行一次。</p><h2 id="抽象类和抽象方法" tabindex="-1">抽象类和抽象方法 <a class="header-anchor" href="#抽象类和抽象方法" aria-label="Permalink to &quot;抽象类和抽象方法&quot;">​</a></h2><p>作用</p><ul><li>抽取共性时，无法确定方法体，就把方法定义为抽象的。</li><li>强制让子类按照某种格式重写。</li><li>抽象方法所在的类，必须是抽象类。</li></ul><p>格式</p><ul><li>抽象类的定义格式<code>public abstract class 类名 {}</code></li><li>抽象方法的定义格式<code>public abstract 返回值类型 方法名(参数列表);</code></li></ul><p>注意事项</p><ul><li>抽象类不能实例化</li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>可以有构造方法</li><li>抽象类的子类（要么重写抽象类中的所有抽象方法，要么是抽象类）</li></ul><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><p>接口的定义和使用</p><ul><li>接口用关键字interface来定义: <code>public interface 接口名{}</code></li><li>接口不能实例化</li><li>接口和类之间是实现关系，通过implements关键字表示<code>public class 类名 implements 接口名 {}</code></li><li>接口的子类（实现类） <ul><li>要么重写接口中的所有方法</li><li>要么是抽象类</li></ul></li></ul><p>接口中成员的特点</p><ul><li>成员变量 <ul><li>只能是常量</li><li>默认修饰符: public static final</li></ul></li><li>构造方法：无</li><li>成员方法 <ul><li>jdk7以前只能是抽象方法</li><li>默认修饰符: public abstract</li><li>jdk9可以定义私有方法。</li></ul></li></ul><p>有方法体的方法（jdk8）</p><ul><li>格式：<code>public default void show(){}</code></li><li>注意事项:（不能省略default，不强制重写，但如实现了多个接口，子类必须对该方法进行重写）</li></ul><p>静态方法(jdk8)</p><ul><li>格式：<code>publisc static 返回值类型 方法名(参数列表){}</code></li><li>注意事项:（static不能省略，静态方法只能通过接口名调用，不能通过实现类名或者对象调用）</li><li>调用: <code>接口.方法名();</code></li></ul><p>私有方法(jdk9)</p><ul><li>为本接口的方法提供服务</li><li>普通的私有方法: <code>private 返回值类型 方法名（参数列表）{}</code></li><li>静态的私有方法：<code>private static返回值类型 方法名（参数列表）{}</code></li></ul><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h2><p>适配器设计模式</p><ul><li>当接口中抽象方法过多，但我只用部分，就可以用该模式</li><li>相当于在实现类和接口之间添加了第三者。</li></ul><h2 id="内部类" tabindex="-1">内部类 <a class="header-anchor" href="#内部类" aria-label="Permalink to &quot;内部类&quot;">​</a></h2><p>写在一个类里面的类就叫内部类。</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><p>jdk16之前，成员内部类里面不能定义静态变量</p><p>成员内部类：</p><ul><li>当内部类被private修饰时，外部类调用内部类（Object多态或者直接使用对象）<code>Object ph = new People().getHeartInstancen();</code></li><li>当内部类被非private修饰时，外部类名.内部类名 对象名 = 外部类对象.内部类对象(<code>People.Heart ph = new People().new Heart()</code>)</li><li>外部类成员变量和内部类成员变量重名时，使用Outer.this.变量名访问</li></ul><p>静态内部类：</p><ul><li>特殊的成员内部类</li><li>创建：<code>Outer.Inter oi = new Outer.Inter()</code></li><li>调用静态内部类中的方法: <ul><li>静态方法<code>Outer.Inter.show()</code></li><li>非静态方法<code>new Outer.Inter().show()</code></li></ul></li></ul><p>局部内部类</p><ul><li>将内部类定义在方法中就叫局部内部类，类似方法中的局部变量。</li><li>外界是无法直接使用，需要在方法内部创建对象并使用。</li><li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量。</li></ul><p>匿名内部类</p><ul><li>本质上就是隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置。</li><li>格式 <code>new 类名或者接口名() {/*重写方法*/}</code></li><li>格式细节 <ul><li>包含了继承或实现，方法重写，创建对象。</li><li>整体就是一个类的子类对象或接口的实现类对象</li></ul></li><li>使用场景：当方法的参数是接口或者类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码。</li></ul><h2 id="gui" tabindex="-1">GUI <a class="header-anchor" href="#gui" aria-label="Permalink to &quot;GUI&quot;">​</a></h2><p>AWT包、Swing包</p>`,195)]))}const h=a(o,[["render",e]]);export{A as __pageData,h as default};
