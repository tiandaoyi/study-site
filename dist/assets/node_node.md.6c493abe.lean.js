import{_ as a,o as n,c as l,S as o}from"./chunks/framework.6a244606.js";const p="/images/node-eventloop.png",e="/images/node-koa.png",E=JSON.parse('{"title":"node","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"node/node.md","filePath":"node/node.md","lastUpdated":1691547028000}'),t={name:"node/node.md"};function r(c,s,y,A,i,D){return n(),l("div",null,s[0]||(s[0]=[o('<h1 id="node" tabindex="-1">node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;node&quot;">​</a></h1><h2 id="node基础" tabindex="-1">node基础 <a class="header-anchor" href="#node基础" aria-label="Permalink to &quot;node基础&quot;">​</a></h2><h3 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><p>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效，适合运用在高并发，I/O 密集、少量业务逻辑的场景。</p><h3 id="单线程架构模型" tabindex="-1">单线程架构模型 <a class="header-anchor" href="#单线程架构模型" aria-label="Permalink to &quot;单线程架构模型&quot;">​</a></h3><p>Nodejs 其实并不是真正的单线程架构，因为 nodejs 还有I/O线程存在（网络I/O、磁盘I/O），这些I/O线程是由更底层的 libuv 处理，这部分线程对于开发者来说是透明的。 JavaScript 代码永远运行在V8上，是单线程的。</p><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><ol><li>单线程就一个进程在玩，省去了进程切换的开销</li><li>还有线程同步的问题，线程冲突的问题的也不需要担心</li></ol><h4 id="劣势" tabindex="-1">劣势 <a class="header-anchor" href="#劣势" aria-label="Permalink to &quot;劣势&quot;">​</a></h4><ol><li>劣势也很明显，现在起步都是 4 核，单线程没法充分利用 cpu 的资源</li><li>单线程，一旦崩溃，应用就挂掉了，大家调试脚本也知道一旦执行过程报错了，本次调试就直接结束了</li><li>因为只能利用一个 cpu ，一旦 cpu 被某个计算一直占用， cpu 得不到释放，后续的请求就会一直被挂起，直接无响应了</li></ol><p>当然这些劣势都已经有成熟的解决方案了，使用 PM2 管理进程，或者上 K8S 也可以。</p><h3 id="事件循环机制" tabindex="-1">事件循环机制 <a class="header-anchor" href="#事件循环机制" aria-label="Permalink to &quot;事件循环机制&quot;">​</a></h3><p><img src="'+p+`" alt="node-eventloop" title="node-eventloop"></p><ol><li>Timers: 定时器 Interval Timoout 回调事件，将依次执行定时器回调函数</li><li>Pending: 一些系统级回调将会在此阶段执行</li><li>Idle,prepare: 此阶段&quot;仅供内部使用&quot;</li><li>Poll: IO回调函数，这个阶段较为重要也复杂些，</li><li>Check: 执行 setImmediate() 的回调</li><li>Close: 执行 socket 的 close 事件回调</li></ol><p>与浏览器区别：多了process.nextTick（这个事件的优先级要高于其他微队列的事件）</p><h3 id="创建线程进程" tabindex="-1">创建线程进程 <a class="header-anchor" href="#创建线程进程" aria-label="Permalink to &quot;创建线程进程&quot;">​</a></h3><h4 id="开启多个子进程" tabindex="-1">开启多个子进程 <a class="header-anchor" href="#开启多个子进程" aria-label="Permalink to &quot;开启多个子进程&quot;">​</a></h4><p>单线程的一个缺点是不能充分利用多核，所以官方推出了 cluster 模块， cluster 模块可以创建共享服务器端口的子进程</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">cluster</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">cluster</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#4D9375;">for</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">let</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">i</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">0</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">i</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">&lt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">numCPUs</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;">++</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">cluster</span><span style="color:#666666;">.</span><span style="color:#80A665;">fork</span><span style="color:#666666;">();</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 生成新的工作进程，可以使用 IPC 和父进程通信</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">cluster</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">cluster</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">numCPUs</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;">++</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">cluster</span><span style="color:#999999;">.</span><span style="color:#59873A;">fork</span><span style="color:#999999;">();</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 生成新的工作进程，可以使用 IPC 和父进程通信</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>本质还是通过 child_process.fork() 专门用于衍生新的 Node.js 进程,衍生的 Node.js 子进程独立于父进程，但两者之间建立的 IPC 通信通道除外， 每个进程都有自己的内存，带有自己的 V8 实例。</p><h4 id="在一个进程前提下开启多个线程" tabindex="-1">在一个进程前提下开启多个线程 <a class="header-anchor" href="#在一个进程前提下开启多个线程" aria-label="Permalink to &quot;在一个进程前提下开启多个线程&quot;">​</a></h4><ul><li>在 nodejs 10.0 及以上的版本，新增了 worker_threads 模块，可开启多个线程</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">Worker</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">isMainThread</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">parentPort</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">workerData</span></span>
<span class="line"><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">worker_threads</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">worker</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Worker</span><span style="color:#666666;">(</span><span style="color:#BD976A;">__filename</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">workerData</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">script</span></span>
<span class="line"><span style="color:#666666;">});</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Worker</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">isMainThread</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">parentPort</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">workerData</span></span>
<span class="line"><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">worker_threads</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">worker</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Worker</span><span style="color:#999999;">(</span><span style="color:#B07D48;">__filename</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">workerData</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">script</span></span>
<span class="line"><span style="color:#999999;">});</span></span></code></pre></div><ul><li>线程间如何传输数据: <code>parentPort postMessage on</code> 发送监听消息</li><li>共享内存： <code>SharedArrayBuffer</code> 通过这个共享内存</li></ul><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><ul><li>常见的一个场景，在服务中若需要执行 shell 命令，那么就需要开启一个进程</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">var</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">exec</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">child_process</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">).</span><span style="color:#BD976A;">exec</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#80A665;">exec</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">ls</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#666666;">(</span><span style="color:#BD976A;">error</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">stdout</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">stderr</span><span style="color:#666666;">){</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">error</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">error</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">error: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">+</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">error</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#4D9375;">return</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">stdout: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">+</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">stdout</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">});</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">exec</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">child_process</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">).</span><span style="color:#B07D48;">exec</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#59873A;">exec</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">ls</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">error</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">stdout</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">stderr</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">error: </span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">error</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">stdout: </span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">stdout</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">});</span></span></code></pre></div><ul><li>对于服务中涉及大量计算的，可以开启一个工作线程，由这个线程去执行，执行完毕再把结果通知给服务线程。</li></ul><h3 id="stream" tabindex="-1">stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;stream&quot;">​</a></h3><p>流在 nodejs 用的很广泛，但对于大部分开发者来说，更多的是使用流，比如说 HTTP 中的 request respond ，标准输入输出，文件读取（createReadStream）， gulp 构建工具等等。</p><p>流，可以理解成是一个管道，比如读取一个文件，常用的方法是从硬盘读取到内存中，在从内存中读取，这种方式对于小文件没问题，但若是大文件，效率就非常低，还有可能内存不足，采用流的方式，就好像给大文件插上一根吸管，持续的一点点读取文件的内容，管道的另一端收到数据，就可以进行处理。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">fs</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">fs</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 直接读取文件</span></span>
<span class="line"><span style="color:#BD976A;">fs</span><span style="color:#666666;">.</span><span style="color:#80A665;">open</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./xxx.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">r</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">err</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">data</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">err</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#BD976A;">err</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#BD976A;">data</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 流的方式读取、写入</span></span>
<span class="line"><span style="color:#CB7676;">let</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">readStream</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">fs</span><span style="color:#666666;">.</span><span style="color:#80A665;">createReadStream</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./a.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#CB7676;">let</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">writeStream</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">fs</span><span style="color:#666666;">.</span><span style="color:#80A665;">createWriteStream</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./b.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#BD976A;">readStream</span><span style="color:#666666;">.</span><span style="color:#80A665;">pipe</span><span style="color:#666666;">(</span><span style="color:#BD976A;">writeStream</span><span style="color:#666666;">).</span><span style="color:#80A665;">on</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">data</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">chunk</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 可读流被可写流消费</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#BD976A;">chunk</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">writeStream</span><span style="color:#666666;">.</span><span style="color:#80A665;">write</span><span style="color:#666666;">(</span><span style="color:#BD976A;">chunk</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}).</span><span style="color:#80A665;">on</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">finish</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">finish</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">))</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fs</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">fs</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 直接读取文件</span></span>
<span class="line"><span style="color:#B07D48;">fs</span><span style="color:#999999;">.</span><span style="color:#59873A;">open</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./xxx.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">r</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 流的方式读取、写入</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">readStream</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fs</span><span style="color:#999999;">.</span><span style="color:#59873A;">createReadStream</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./a.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">writeStream</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fs</span><span style="color:#999999;">.</span><span style="color:#59873A;">createWriteStream</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./b.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">readStream</span><span style="color:#999999;">.</span><span style="color:#59873A;">pipe</span><span style="color:#999999;">(</span><span style="color:#B07D48;">writeStream</span><span style="color:#999999;">).</span><span style="color:#59873A;">on</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">data</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">chunk</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 可读流被可写流消费</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">chunk</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">writeStream</span><span style="color:#999999;">.</span><span style="color:#59873A;">write</span><span style="color:#999999;">(</span><span style="color:#B07D48;">chunk</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}).</span><span style="color:#59873A;">on</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">finish</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">finish</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">))</span></span></code></pre></div><p>四种基本的流类型：</p><ol><li>Writable - 可写入数据的流（例如 fs.createWriteStream()）。</li><li>Readable - 可读取数据的流（例如 fs.createReadStream()）。</li><li>Duplex - 可读又可写的流（例如 net.Socket）。</li><li>Transform - 在读写过程中可以修改或转换数据的 Duplex 流（例如 zlib.createDeflate()）。</li></ol><h2 id="v8" tabindex="-1">v8 <a class="header-anchor" href="#v8" aria-label="Permalink to &quot;v8&quot;">​</a></h2><h3 id="js内存机制-数据是如何存储的" tabindex="-1">js内存机制，数据是如何存储的 <a class="header-anchor" href="#js内存机制-数据是如何存储的" aria-label="Permalink to &quot;js内存机制，数据是如何存储的&quot;">​</a></h3><ul><li>基本类型存储在栈，引用类型存储在堆</li><li>赋值：基本类型直接替换，引用类型赋值内存地址</li></ul><h3 id="v8引擎如何进行垃圾内存的回收" tabindex="-1">v8引擎如何进行垃圾内存的回收 <a class="header-anchor" href="#v8引擎如何进行垃圾内存的回收" aria-label="Permalink to &quot;v8引擎如何进行垃圾内存的回收&quot;">​</a></h3><h4 id="新生代-临时-32mb或者16mb" tabindex="-1">新生代（临时）32MB或者16MB <a class="header-anchor" href="#新生代-临时-32mb或者16mb" aria-label="Permalink to &quot;新生代（临时）32MB或者16MB&quot;">​</a></h4><ul><li>FROM -&gt; TO，检查FROM，如果可以用直接放在TO中，然后调换位置。</li><li>Scavenge算法，解决内存碎片问题，大大方便了后续连续空间的分配。局限性：内存只能使用新生代的一半，但是时间上非常优秀。</li><li>调整新生代部分的内存，单位是KB，<code>node --max-new-space-size=2048 xx.js</code></li></ul><h4 id="老生代-常驻" tabindex="-1">老生代（常驻） <a class="header-anchor" href="#老生代-常驻" aria-label="Permalink to &quot;老生代（常驻）&quot;">​</a></h4><p>新生代内存多次回收，仍然存在，就放到老生代中（1. 经历过一次Scavenge回收 2. To闲置的空间占用超过25%）</p><p>调整老生代部分的内存，单位是MB，<code>node --max-old-space-size=2048 xx.js</code></p><p>增量标记：增量标记的方案，即将一口气完成的标记任务分为很多小的部分完成，每做完一个小的部分就&quot;歇&quot;一下，就js应用逻辑执行一会儿，然后再执行下面的部分，如果循环，直到标记阶段完成才进入内存碎片的整理上面来。其实这个过程跟React Fiber的思路有点像。</p><h5 id="内存回收" tabindex="-1">内存回收 <a class="header-anchor" href="#内存回收" aria-label="Permalink to &quot;内存回收&quot;">​</a></h5><p>内存回收过程</p><ol><li>标记 - 清除（遍历标记、非引用去除标记、再加标记就是待去除的）</li><li>整理内存（清除后，把存活的对象往一起靠）</li></ol><p>内存管理</p><ol><li>数据不再需要设置成null</li><li>隐藏类和删除操作（避免动态添加或删除）</li><li>避免内存泄漏（setInterval引用外部，闭包引用outer函数）</li><li>静态分配（new Array(100)，容易过早优化）与对象池（按需分配，不存在时创建新的，存在时复用）</li></ol><p>引用计数方式（不推荐）</p><p>内存回收总结</p><ol><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除</li><li>主流是标记清理，先给当前不使用的加上标记，再回来回收他们的内存</li><li>引用计数需要记录被使用了多少次，js引擎不使用这种算法但是老版本ie仍然受影响，原因是js会访问非原生js对象，如DOM</li><li>引用计数再在代码中存在循环引用时会出现问题</li><li>解除变量的引用不仅可以消除循环引用，对垃圾回收也有帮助</li></ol><h3 id="v8执行js过程" tabindex="-1">v8执行js过程 <a class="header-anchor" href="#v8执行js过程" aria-label="Permalink to &quot;v8执行js过程&quot;">​</a></h3><p>词法分析 ---&gt; AST ---&gt; 字节码 ---(v8解释器)--&gt; 机器码</p><h4 id="根据词法和语法分析-生成ast-抽象语法树" tabindex="-1">根据词法和语法分析，生成AST（抽象语法树） <a class="header-anchor" href="#根据词法和语法分析-生成ast-抽象语法树" aria-label="Permalink to &quot;根据词法和语法分析，生成AST（抽象语法树）&quot;">​</a></h4><ol><li>词法分析即分词，它的工作就是将一行行的代码分解成一个个token</li><li>接下来语法分析阶段，将生成的这些token数据，根据一定的语法规则转换为AST</li></ol><h4 id="通过v8的解释器来生成字节码" tabindex="-1">通过v8的解释器来生成字节码 <a class="header-anchor" href="#通过v8的解释器来生成字节码" aria-label="Permalink to &quot;通过v8的解释器来生成字节码&quot;">​</a></h4><p>字节码是介于AST 和 机器码之间的一种代码，但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码然后执行。</p><h4 id="执行代码" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码" aria-label="Permalink to &quot;执行代码&quot;">​</a></h4><ol><li>通过解释器逐行执行字节码，转换成机器码，省去生成二进制文件的操作，减小内存的压力</li><li>执行过程中如果一部分代码重复，则把这部分代码叫做热点代码，使用编译器编译成机器码，保存起来</li><li>代码执行越久，执行效率越高</li><li>字节码不仅配合了解释器，而且还和编译器打交道，所以JS并不是完全的解释型语言，解释器和编译器结合的技术叫即时编译，JIT</li></ol><h2 id="koa" tabindex="-1">koa <a class="header-anchor" href="#koa" aria-label="Permalink to &quot;koa&quot;">​</a></h2><h3 id="核心-洋葱圈模型" tabindex="-1">核心 - 洋葱圈模型 <a class="header-anchor" href="#核心-洋葱圈模型" aria-label="Permalink to &quot;核心 - 洋葱圈模型&quot;">​</a></h3><p><img src="`+e+`" alt="node-koa" title="node-koa"></p><p>遇到next，就进入下一层，一直到无next，然后再从中间一层一层往外返回</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Koa</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">koa</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">app</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Koa</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">app</span><span style="color:#666666;">.</span><span style="color:#80A665;">use</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">ctx</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">next</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">next</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">app</span><span style="color:#666666;">.</span><span style="color:#80A665;">use</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">ctx</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">next</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">3</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">next</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">4</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">app</span><span style="color:#666666;">.</span><span style="color:#80A665;">use</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">ctx</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">next</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">5</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">next</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">6</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#BD976A;">app</span><span style="color:#666666;">.</span><span style="color:#80A665;">listen</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">3000</span><span style="color:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// koa的执行逻辑输出是：1，3，5，6，4，2</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Koa</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">koa</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Koa</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">next</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">next</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">next</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">next</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">4</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">next</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">5</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">next</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">6</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">listen</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3000</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// koa的执行逻辑输出是：1，3，5，6，4，2</span></span></code></pre></div>`,65)]))}const d=a(t,[["render",r]]);export{E as __pageData,d as default};
